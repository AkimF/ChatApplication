// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chatserver {

namespace {

const ::google::protobuf::Descriptor* LogInRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogInRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogInReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogInReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOutReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOutReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveMessageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveMessageReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListM_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveMessageM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveMessageM_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageM_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogInM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogInM_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOutM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOutM_reflection_ = NULL;
const ::google::protobuf::Descriptor* oneOfTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  oneOfTypes_reflection_ = NULL;
struct oneOfTypesOneofInstance {
  const ::chatserver::LogOutM* logout_;
  const ::chatserver::LogInM* login_;
  const ::chatserver::SendMessageM* sendmessage_;
  const ::chatserver::ReceiveMessageM* receivemessage_;
  const ::chatserver::ListM* list_;
}* oneOfTypes_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chatserver_2eproto() {
  protobuf_AddDesc_chatserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatserver.proto");
  GOOGLE_CHECK(file != NULL);
  LogInRequest_descriptor_ = file->message_type(0);
  static const int LogInRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInRequest, user_),
  };
  LogInRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogInRequest_descriptor_,
      LogInRequest::default_instance_,
      LogInRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogInRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInRequest, _is_default_instance_));
  LogInReply_descriptor_ = file->message_type(1);
  static const int LogInReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInReply, conformation_),
  };
  LogInReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogInReply_descriptor_,
      LogInReply::default_instance_,
      LogInReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogInReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInReply, _is_default_instance_));
  LogOutRequest_descriptor_ = file->message_type(2);
  static const int LogOutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutRequest, user_),
  };
  LogOutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogOutRequest_descriptor_,
      LogOutRequest::default_instance_,
      LogOutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogOutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutRequest, _is_default_instance_));
  LogOutReply_descriptor_ = file->message_type(3);
  static const int LogOutReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutReply, conformation_),
  };
  LogOutReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogOutReply_descriptor_,
      LogOutReply::default_instance_,
      LogOutReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogOutReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutReply, _is_default_instance_));
  SendMessageRequest_descriptor_ = file->message_type(4);
  static const int SendMessageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, recipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, message_),
  };
  SendMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendMessageRequest_descriptor_,
      SendMessageRequest::default_instance_,
      SendMessageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _is_default_instance_));
  SendMessageReply_descriptor_ = file->message_type(5);
  static const int SendMessageReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageReply, conformation_),
  };
  SendMessageReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendMessageReply_descriptor_,
      SendMessageReply::default_instance_,
      SendMessageReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendMessageReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageReply, _is_default_instance_));
  ReceiveMessageRequest_descriptor_ = file->message_type(6);
  static const int ReceiveMessageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageRequest, user_),
  };
  ReceiveMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReceiveMessageRequest_descriptor_,
      ReceiveMessageRequest::default_instance_,
      ReceiveMessageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReceiveMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageRequest, _is_default_instance_));
  ReceiveMessageReply_descriptor_ = file->message_type(7);
  static const int ReceiveMessageReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageReply, conformation_),
  };
  ReceiveMessageReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReceiveMessageReply_descriptor_,
      ReceiveMessageReply::default_instance_,
      ReceiveMessageReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReceiveMessageReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageReply, _is_default_instance_));
  ListRequest_descriptor_ = file->message_type(8);
  static const int ListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, list_),
  };
  ListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRequest_descriptor_,
      ListRequest::default_instance_,
      ListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _is_default_instance_));
  ListReply_descriptor_ = file->message_type(9);
  static const int ListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListReply, list_),
  };
  ListReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListReply_descriptor_,
      ListReply::default_instance_,
      ListReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListReply, _is_default_instance_));
  ListM_descriptor_ = file->message_type(10);
  static const int ListM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListM, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListM, request_),
  };
  ListM_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListM_descriptor_,
      ListM::default_instance_,
      ListM_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListM),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListM, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListM, _is_default_instance_));
  ReceiveMessageM_descriptor_ = file->message_type(11);
  static const int ReceiveMessageM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageM, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageM, request_),
  };
  ReceiveMessageM_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReceiveMessageM_descriptor_,
      ReceiveMessageM::default_instance_,
      ReceiveMessageM_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReceiveMessageM),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageM, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveMessageM, _is_default_instance_));
  SendMessageM_descriptor_ = file->message_type(12);
  static const int SendMessageM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageM, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageM, request_),
  };
  SendMessageM_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendMessageM_descriptor_,
      SendMessageM::default_instance_,
      SendMessageM_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendMessageM),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageM, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageM, _is_default_instance_));
  LogInM_descriptor_ = file->message_type(13);
  static const int LogInM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInM, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInM, request_),
  };
  LogInM_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogInM_descriptor_,
      LogInM::default_instance_,
      LogInM_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogInM),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInM, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInM, _is_default_instance_));
  LogOutM_descriptor_ = file->message_type(14);
  static const int LogOutM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutM, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutM, request_),
  };
  LogOutM_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogOutM_descriptor_,
      LogOutM::default_instance_,
      LogOutM_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogOutM),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutM, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutM, _is_default_instance_));
  oneOfTypes_descriptor_ = file->message_type(15);
  static const int oneOfTypes_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(oneOfTypes_default_oneof_instance_, logout_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(oneOfTypes_default_oneof_instance_, login_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(oneOfTypes_default_oneof_instance_, sendmessage_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(oneOfTypes_default_oneof_instance_, receivemessage_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(oneOfTypes_default_oneof_instance_, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneOfTypes, types_),
  };
  oneOfTypes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      oneOfTypes_descriptor_,
      oneOfTypes::default_instance_,
      oneOfTypes_offsets_,
      -1,
      -1,
      -1,
      oneOfTypes_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneOfTypes, _oneof_case_[0]),
      sizeof(oneOfTypes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneOfTypes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneOfTypes, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogInRequest_descriptor_, &LogInRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogInReply_descriptor_, &LogInReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogOutRequest_descriptor_, &LogOutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogOutReply_descriptor_, &LogOutReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendMessageReply_descriptor_, &SendMessageReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReceiveMessageRequest_descriptor_, &ReceiveMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReceiveMessageReply_descriptor_, &ReceiveMessageReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRequest_descriptor_, &ListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListReply_descriptor_, &ListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListM_descriptor_, &ListM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReceiveMessageM_descriptor_, &ReceiveMessageM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendMessageM_descriptor_, &SendMessageM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogInM_descriptor_, &LogInM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogOutM_descriptor_, &LogOutM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      oneOfTypes_descriptor_, &oneOfTypes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatserver_2eproto() {
  delete LogInRequest::default_instance_;
  delete LogInRequest_reflection_;
  delete LogInReply::default_instance_;
  delete LogInReply_reflection_;
  delete LogOutRequest::default_instance_;
  delete LogOutRequest_reflection_;
  delete LogOutReply::default_instance_;
  delete LogOutReply_reflection_;
  delete SendMessageRequest::default_instance_;
  delete SendMessageRequest_reflection_;
  delete SendMessageReply::default_instance_;
  delete SendMessageReply_reflection_;
  delete ReceiveMessageRequest::default_instance_;
  delete ReceiveMessageRequest_reflection_;
  delete ReceiveMessageReply::default_instance_;
  delete ReceiveMessageReply_reflection_;
  delete ListRequest::default_instance_;
  delete ListRequest_reflection_;
  delete ListReply::default_instance_;
  delete ListReply_reflection_;
  delete ListM::default_instance_;
  delete ListM_reflection_;
  delete ReceiveMessageM::default_instance_;
  delete ReceiveMessageM_reflection_;
  delete SendMessageM::default_instance_;
  delete SendMessageM_reflection_;
  delete LogInM::default_instance_;
  delete LogInM_reflection_;
  delete LogOutM::default_instance_;
  delete LogOutM_reflection_;
  delete oneOfTypes::default_instance_;
  delete oneOfTypes_default_oneof_instance_;
  delete oneOfTypes_reflection_;
}

void protobuf_AddDesc_chatserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_chatserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020chatserver.proto\022\nchatserver\"\034\n\014LogInR"
    "equest\022\014\n\004user\030\001 \001(\t\"\"\n\nLogInReply\022\024\n\014co"
    "nformation\030\001 \001(\t\"\035\n\rLogOutRequest\022\014\n\004use"
    "r\030\001 \001(\t\"#\n\013LogOutReply\022\024\n\014conformation\030\001"
    " \001(\t\"F\n\022SendMessageRequest\022\014\n\004user\030\001 \001(\t"
    "\022\021\n\trecipient\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"(\n\020"
    "SendMessageReply\022\024\n\014conformation\030\001 \001(\t\"%"
    "\n\025ReceiveMessageRequest\022\014\n\004user\030\001 \001(\t\"+\n"
    "\023ReceiveMessageReply\022\024\n\014conformation\030\001 \001"
    "(\t\"\033\n\013ListRequest\022\014\n\004list\030\001 \001(\t\"\031\n\tListR"
    "eply\022\014\n\004list\030\001 \001(\t\"W\n\005ListM\022$\n\005reply\030\001 \001"
    "(\0132\025.chatserver.ListReply\022(\n\007request\030\002 \001"
    "(\0132\027.chatserver.ListRequest\"u\n\017ReceiveMe"
    "ssageM\022.\n\005reply\030\001 \001(\0132\037.chatserver.Recei"
    "veMessageReply\0222\n\007request\030\002 \001(\0132!.chatse"
    "rver.ReceiveMessageRequest\"l\n\014SendMessag"
    "eM\022+\n\005reply\030\001 \001(\0132\034.chatserver.SendMessa"
    "geReply\022/\n\007request\030\002 \001(\0132\036.chatserver.Se"
    "ndMessageRequest\"Z\n\006LogInM\022%\n\005reply\030\001 \001("
    "\0132\026.chatserver.LogInReply\022)\n\007request\030\002 \001"
    "(\0132\030.chatserver.LogInRequest\"]\n\007LogOutM\022"
    "&\n\005reply\030\001 \001(\0132\027.chatserver.LogOutReply\022"
    "*\n\007request\030\002 \001(\0132\031.chatserver.LogOutRequ"
    "est\"\354\001\n\noneOfTypes\022%\n\006logout\030\001 \001(\0132\023.cha"
    "tserver.LogOutMH\000\022#\n\005login\030\002 \001(\0132\022.chats"
    "erver.LogInMH\000\022/\n\013sendmessage\030\003 \001(\0132\030.ch"
    "atserver.SendMessageMH\000\0225\n\016receivemessag"
    "e\030\004 \001(\0132\033.chatserver.ReceiveMessageMH\000\022!"
    "\n\004list\030\005 \001(\0132\021.chatserver.ListMH\000B\007\n\005typ"
    "es2\352\002\n\nChatServer\022;\n\005LogIn\022\030.chatserver."
    "LogInRequest\032\026.chatserver.LogInReply\"\000\022>"
    "\n\006LogOut\022\031.chatserver.LogOutRequest\032\027.ch"
    "atserver.LogOutReply\"\000\022M\n\013SendMessage\022\036."
    "chatserver.SendMessageRequest\032\034.chatserv"
    "er.SendMessageReply\"\000\022V\n\016ReceiveMessage\022"
    "!.chatserver.ReceiveMessageRequest\032\037.cha"
    "tserver.ReceiveMessageReply\"\000\0228\n\004List\022\027."
    "chatserver.ListRequest\032\025.chatserver.List"
    "Reply\"\000b\006proto3", 1535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatserver.proto", &protobuf_RegisterTypes);
  LogInRequest::default_instance_ = new LogInRequest();
  LogInReply::default_instance_ = new LogInReply();
  LogOutRequest::default_instance_ = new LogOutRequest();
  LogOutReply::default_instance_ = new LogOutReply();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  SendMessageReply::default_instance_ = new SendMessageReply();
  ReceiveMessageRequest::default_instance_ = new ReceiveMessageRequest();
  ReceiveMessageReply::default_instance_ = new ReceiveMessageReply();
  ListRequest::default_instance_ = new ListRequest();
  ListReply::default_instance_ = new ListReply();
  ListM::default_instance_ = new ListM();
  ReceiveMessageM::default_instance_ = new ReceiveMessageM();
  SendMessageM::default_instance_ = new SendMessageM();
  LogInM::default_instance_ = new LogInM();
  LogOutM::default_instance_ = new LogOutM();
  oneOfTypes::default_instance_ = new oneOfTypes();
  oneOfTypes_default_oneof_instance_ = new oneOfTypesOneofInstance();
  LogInRequest::default_instance_->InitAsDefaultInstance();
  LogInReply::default_instance_->InitAsDefaultInstance();
  LogOutRequest::default_instance_->InitAsDefaultInstance();
  LogOutReply::default_instance_->InitAsDefaultInstance();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  SendMessageReply::default_instance_->InitAsDefaultInstance();
  ReceiveMessageRequest::default_instance_->InitAsDefaultInstance();
  ReceiveMessageReply::default_instance_->InitAsDefaultInstance();
  ListRequest::default_instance_->InitAsDefaultInstance();
  ListReply::default_instance_->InitAsDefaultInstance();
  ListM::default_instance_->InitAsDefaultInstance();
  ReceiveMessageM::default_instance_->InitAsDefaultInstance();
  SendMessageM::default_instance_->InitAsDefaultInstance();
  LogInM::default_instance_->InitAsDefaultInstance();
  LogOutM::default_instance_->InitAsDefaultInstance();
  oneOfTypes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatserver_2eproto {
  StaticDescriptorInitializer_chatserver_2eproto() {
    protobuf_AddDesc_chatserver_2eproto();
  }
} static_descriptor_initializer_chatserver_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogInRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogInRequest::LogInRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.LogInRequest)
}

void LogInRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogInRequest::LogInRequest(const LogInRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.LogInRequest)
}

void LogInRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogInRequest::~LogInRequest() {
  // @@protoc_insertion_point(destructor:chatserver.LogInRequest)
  SharedDtor();
}

void LogInRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogInRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogInRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogInRequest_descriptor_;
}

const LogInRequest& LogInRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

LogInRequest* LogInRequest::default_instance_ = NULL;

LogInRequest* LogInRequest::New(::google::protobuf::Arena* arena) const {
  LogInRequest* n = new LogInRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.LogInRequest)
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogInRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.LogInRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.LogInRequest.user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.LogInRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.LogInRequest)
  return false;
#undef DO_
}

void LogInRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.LogInRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogInRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.LogInRequest)
}

::google::protobuf::uint8* LogInRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.LogInRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogInRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.LogInRequest)
  return target;
}

int LogInRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.LogInRequest)
  int total_size = 0;

  // optional string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.LogInRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogInRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogInRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.LogInRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.LogInRequest)
    MergeFrom(*source);
  }
}

void LogInRequest::MergeFrom(const LogInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.LogInRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void LogInRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.LogInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInRequest::CopyFrom(const LogInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.LogInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInRequest::IsInitialized() const {

  return true;
}

void LogInRequest::Swap(LogInRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogInRequest::InternalSwap(LogInRequest* other) {
  user_.Swap(&other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogInRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogInRequest_descriptor_;
  metadata.reflection = LogInRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogInRequest

// optional string user = 1;
void LogInRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogInRequest::user() const {
  // @@protoc_insertion_point(field_get:chatserver.LogInRequest.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogInRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.LogInRequest.user)
}
 void LogInRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.LogInRequest.user)
}
 void LogInRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.LogInRequest.user)
}
 ::std::string* LogInRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.LogInRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogInRequest::release_user() {
  // @@protoc_insertion_point(field_release:chatserver.LogInRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogInRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogInRequest.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogInReply::kConformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogInReply::LogInReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.LogInReply)
}

void LogInReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogInReply::LogInReply(const LogInReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.LogInReply)
}

void LogInReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conformation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogInReply::~LogInReply() {
  // @@protoc_insertion_point(destructor:chatserver.LogInReply)
  SharedDtor();
}

void LogInReply::SharedDtor() {
  conformation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogInReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogInReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogInReply_descriptor_;
}

const LogInReply& LogInReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

LogInReply* LogInReply::default_instance_ = NULL;

LogInReply* LogInReply::New(::google::protobuf::Arena* arena) const {
  LogInReply* n = new LogInReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogInReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.LogInReply)
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogInReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.LogInReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string conformation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conformation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conformation().data(), this->conformation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.LogInReply.conformation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.LogInReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.LogInReply)
  return false;
#undef DO_
}

void LogInReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.LogInReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogInReply.conformation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->conformation(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.LogInReply)
}

::google::protobuf::uint8* LogInReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.LogInReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogInReply.conformation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->conformation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.LogInReply)
  return target;
}

int LogInReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.LogInReply)
  int total_size = 0;

  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conformation());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.LogInReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogInReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogInReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.LogInReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.LogInReply)
    MergeFrom(*source);
  }
}

void LogInReply::MergeFrom(const LogInReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.LogInReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.conformation().size() > 0) {

    conformation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conformation_);
  }
}

void LogInReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.LogInReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInReply::CopyFrom(const LogInReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.LogInReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInReply::IsInitialized() const {

  return true;
}

void LogInReply::Swap(LogInReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogInReply::InternalSwap(LogInReply* other) {
  conformation_.Swap(&other->conformation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogInReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogInReply_descriptor_;
  metadata.reflection = LogInReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogInReply

// optional string conformation = 1;
void LogInReply::clear_conformation() {
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogInReply::conformation() const {
  // @@protoc_insertion_point(field_get:chatserver.LogInReply.conformation)
  return conformation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogInReply::set_conformation(const ::std::string& value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.LogInReply.conformation)
}
 void LogInReply::set_conformation(const char* value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.LogInReply.conformation)
}
 void LogInReply::set_conformation(const char* value, size_t size) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.LogInReply.conformation)
}
 ::std::string* LogInReply::mutable_conformation() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.LogInReply.conformation)
  return conformation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogInReply::release_conformation() {
  // @@protoc_insertion_point(field_release:chatserver.LogInReply.conformation)
  
  return conformation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogInReply::set_allocated_conformation(::std::string* conformation) {
  if (conformation != NULL) {
    
  } else {
    
  }
  conformation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conformation);
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogInReply.conformation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogOutRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogOutRequest::LogOutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.LogOutRequest)
}

void LogOutRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogOutRequest::LogOutRequest(const LogOutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.LogOutRequest)
}

void LogOutRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogOutRequest::~LogOutRequest() {
  // @@protoc_insertion_point(destructor:chatserver.LogOutRequest)
  SharedDtor();
}

void LogOutRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogOutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOutRequest_descriptor_;
}

const LogOutRequest& LogOutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

LogOutRequest* LogOutRequest::default_instance_ = NULL;

LogOutRequest* LogOutRequest::New(::google::protobuf::Arena* arena) const {
  LogOutRequest* n = new LogOutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogOutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.LogOutRequest)
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogOutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.LogOutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.LogOutRequest.user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.LogOutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.LogOutRequest)
  return false;
#undef DO_
}

void LogOutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.LogOutRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogOutRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.LogOutRequest)
}

::google::protobuf::uint8* LogOutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.LogOutRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogOutRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.LogOutRequest)
  return target;
}

int LogOutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.LogOutRequest)
  int total_size = 0;

  // optional string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.LogOutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogOutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogOutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.LogOutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.LogOutRequest)
    MergeFrom(*source);
  }
}

void LogOutRequest::MergeFrom(const LogOutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.LogOutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void LogOutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.LogOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOutRequest::CopyFrom(const LogOutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.LogOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOutRequest::IsInitialized() const {

  return true;
}

void LogOutRequest::Swap(LogOutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogOutRequest::InternalSwap(LogOutRequest* other) {
  user_.Swap(&other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogOutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOutRequest_descriptor_;
  metadata.reflection = LogOutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogOutRequest

// optional string user = 1;
void LogOutRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogOutRequest::user() const {
  // @@protoc_insertion_point(field_get:chatserver.LogOutRequest.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogOutRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.LogOutRequest.user)
}
 void LogOutRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.LogOutRequest.user)
}
 void LogOutRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.LogOutRequest.user)
}
 ::std::string* LogOutRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.LogOutRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogOutRequest::release_user() {
  // @@protoc_insertion_point(field_release:chatserver.LogOutRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogOutRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogOutRequest.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogOutReply::kConformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogOutReply::LogOutReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.LogOutReply)
}

void LogOutReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogOutReply::LogOutReply(const LogOutReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.LogOutReply)
}

void LogOutReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conformation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogOutReply::~LogOutReply() {
  // @@protoc_insertion_point(destructor:chatserver.LogOutReply)
  SharedDtor();
}

void LogOutReply::SharedDtor() {
  conformation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogOutReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOutReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOutReply_descriptor_;
}

const LogOutReply& LogOutReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

LogOutReply* LogOutReply::default_instance_ = NULL;

LogOutReply* LogOutReply::New(::google::protobuf::Arena* arena) const {
  LogOutReply* n = new LogOutReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogOutReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.LogOutReply)
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogOutReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.LogOutReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string conformation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conformation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conformation().data(), this->conformation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.LogOutReply.conformation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.LogOutReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.LogOutReply)
  return false;
#undef DO_
}

void LogOutReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.LogOutReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogOutReply.conformation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->conformation(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.LogOutReply)
}

::google::protobuf::uint8* LogOutReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.LogOutReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.LogOutReply.conformation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->conformation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.LogOutReply)
  return target;
}

int LogOutReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.LogOutReply)
  int total_size = 0;

  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conformation());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOutReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.LogOutReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogOutReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogOutReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.LogOutReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.LogOutReply)
    MergeFrom(*source);
  }
}

void LogOutReply::MergeFrom(const LogOutReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.LogOutReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.conformation().size() > 0) {

    conformation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conformation_);
  }
}

void LogOutReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.LogOutReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOutReply::CopyFrom(const LogOutReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.LogOutReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOutReply::IsInitialized() const {

  return true;
}

void LogOutReply::Swap(LogOutReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogOutReply::InternalSwap(LogOutReply* other) {
  conformation_.Swap(&other->conformation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogOutReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOutReply_descriptor_;
  metadata.reflection = LogOutReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogOutReply

// optional string conformation = 1;
void LogOutReply::clear_conformation() {
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogOutReply::conformation() const {
  // @@protoc_insertion_point(field_get:chatserver.LogOutReply.conformation)
  return conformation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogOutReply::set_conformation(const ::std::string& value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.LogOutReply.conformation)
}
 void LogOutReply::set_conformation(const char* value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.LogOutReply.conformation)
}
 void LogOutReply::set_conformation(const char* value, size_t size) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.LogOutReply.conformation)
}
 ::std::string* LogOutReply::mutable_conformation() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.LogOutReply.conformation)
  return conformation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogOutReply::release_conformation() {
  // @@protoc_insertion_point(field_release:chatserver.LogOutReply.conformation)
  
  return conformation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogOutReply::set_allocated_conformation(::std::string* conformation) {
  if (conformation != NULL) {
    
  } else {
    
  }
  conformation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conformation);
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogOutReply.conformation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMessageRequest::kUserFieldNumber;
const int SendMessageRequest::kRecipientFieldNumber;
const int SendMessageRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.SendMessageRequest)
}

void SendMessageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.SendMessageRequest)
}

void SendMessageRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:chatserver.SendMessageRequest)
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageRequest_descriptor_;
}

const SendMessageRequest& SendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New(::google::protobuf::Arena* arena) const {
  SendMessageRequest* n = new SendMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.SendMessageRequest)
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.SendMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.SendMessageRequest.user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recipient;
        break;
      }

      // optional string recipient = 2;
      case 2: {
        if (tag == 18) {
         parse_recipient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipient().data(), this->recipient().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.SendMessageRequest.recipient"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.SendMessageRequest.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.SendMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.SendMessageRequest)
  return false;
#undef DO_
}

void SendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.SendMessageRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string recipient = 2;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), this->recipient().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageRequest.recipient");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recipient(), output);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.SendMessageRequest)
}

::google::protobuf::uint8* SendMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.SendMessageRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string recipient = 2;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), this->recipient().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageRequest.recipient");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recipient(), target);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.SendMessageRequest)
  return target;
}

int SendMessageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.SendMessageRequest)
  int total_size = 0;

  // optional string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string recipient = 2;
  if (this->recipient().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recipient());
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.SendMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SendMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.SendMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.SendMessageRequest)
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.SendMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.recipient().size() > 0) {

    recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {

  return true;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  user_.Swap(&other->user_);
  recipient_.Swap(&other->recipient_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageRequest_descriptor_;
  metadata.reflection = SendMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMessageRequest

// optional string user = 1;
void SendMessageRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendMessageRequest::user() const {
  // @@protoc_insertion_point(field_get:chatserver.SendMessageRequest.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.SendMessageRequest.user)
}
 void SendMessageRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.SendMessageRequest.user)
}
 void SendMessageRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.SendMessageRequest.user)
}
 ::std::string* SendMessageRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.SendMessageRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMessageRequest::release_user() {
  // @@protoc_insertion_point(field_release:chatserver.SendMessageRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:chatserver.SendMessageRequest.user)
}

// optional string recipient = 2;
void SendMessageRequest::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendMessageRequest::recipient() const {
  // @@protoc_insertion_point(field_get:chatserver.SendMessageRequest.recipient)
  return recipient_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.SendMessageRequest.recipient)
}
 void SendMessageRequest::set_recipient(const char* value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.SendMessageRequest.recipient)
}
 void SendMessageRequest::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.SendMessageRequest.recipient)
}
 ::std::string* SendMessageRequest::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.SendMessageRequest.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMessageRequest::release_recipient() {
  // @@protoc_insertion_point(field_release:chatserver.SendMessageRequest.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:chatserver.SendMessageRequest.recipient)
}

// optional string message = 3;
void SendMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:chatserver.SendMessageRequest.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.SendMessageRequest.message)
}
 void SendMessageRequest::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.SendMessageRequest.message)
}
 void SendMessageRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.SendMessageRequest.message)
}
 ::std::string* SendMessageRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.SendMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:chatserver.SendMessageRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chatserver.SendMessageRequest.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMessageReply::kConformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMessageReply::SendMessageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.SendMessageReply)
}

void SendMessageReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SendMessageReply::SendMessageReply(const SendMessageReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.SendMessageReply)
}

void SendMessageReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conformation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SendMessageReply::~SendMessageReply() {
  // @@protoc_insertion_point(destructor:chatserver.SendMessageReply)
  SharedDtor();
}

void SendMessageReply::SharedDtor() {
  conformation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendMessageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageReply_descriptor_;
}

const SendMessageReply& SendMessageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

SendMessageReply* SendMessageReply::default_instance_ = NULL;

SendMessageReply* SendMessageReply::New(::google::protobuf::Arena* arena) const {
  SendMessageReply* n = new SendMessageReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.SendMessageReply)
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendMessageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.SendMessageReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string conformation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conformation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conformation().data(), this->conformation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.SendMessageReply.conformation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.SendMessageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.SendMessageReply)
  return false;
#undef DO_
}

void SendMessageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.SendMessageReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageReply.conformation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->conformation(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.SendMessageReply)
}

::google::protobuf::uint8* SendMessageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.SendMessageReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.SendMessageReply.conformation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->conformation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.SendMessageReply)
  return target;
}

int SendMessageReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.SendMessageReply)
  int total_size = 0;

  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conformation());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.SendMessageReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SendMessageReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.SendMessageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.SendMessageReply)
    MergeFrom(*source);
  }
}

void SendMessageReply::MergeFrom(const SendMessageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.SendMessageReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.conformation().size() > 0) {

    conformation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conformation_);
  }
}

void SendMessageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.SendMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageReply::CopyFrom(const SendMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.SendMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageReply::IsInitialized() const {

  return true;
}

void SendMessageReply::Swap(SendMessageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMessageReply::InternalSwap(SendMessageReply* other) {
  conformation_.Swap(&other->conformation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendMessageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageReply_descriptor_;
  metadata.reflection = SendMessageReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMessageReply

// optional string conformation = 1;
void SendMessageReply::clear_conformation() {
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendMessageReply::conformation() const {
  // @@protoc_insertion_point(field_get:chatserver.SendMessageReply.conformation)
  return conformation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageReply::set_conformation(const ::std::string& value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.SendMessageReply.conformation)
}
 void SendMessageReply::set_conformation(const char* value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.SendMessageReply.conformation)
}
 void SendMessageReply::set_conformation(const char* value, size_t size) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.SendMessageReply.conformation)
}
 ::std::string* SendMessageReply::mutable_conformation() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.SendMessageReply.conformation)
  return conformation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMessageReply::release_conformation() {
  // @@protoc_insertion_point(field_release:chatserver.SendMessageReply.conformation)
  
  return conformation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageReply::set_allocated_conformation(::std::string* conformation) {
  if (conformation != NULL) {
    
  } else {
    
  }
  conformation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conformation);
  // @@protoc_insertion_point(field_set_allocated:chatserver.SendMessageReply.conformation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceiveMessageRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceiveMessageRequest::ReceiveMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.ReceiveMessageRequest)
}

void ReceiveMessageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReceiveMessageRequest::ReceiveMessageRequest(const ReceiveMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.ReceiveMessageRequest)
}

void ReceiveMessageRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReceiveMessageRequest::~ReceiveMessageRequest() {
  // @@protoc_insertion_point(destructor:chatserver.ReceiveMessageRequest)
  SharedDtor();
}

void ReceiveMessageRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReceiveMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveMessageRequest_descriptor_;
}

const ReceiveMessageRequest& ReceiveMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

ReceiveMessageRequest* ReceiveMessageRequest::default_instance_ = NULL;

ReceiveMessageRequest* ReceiveMessageRequest::New(::google::protobuf::Arena* arena) const {
  ReceiveMessageRequest* n = new ReceiveMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReceiveMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.ReceiveMessageRequest)
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReceiveMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.ReceiveMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.ReceiveMessageRequest.user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.ReceiveMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.ReceiveMessageRequest)
  return false;
#undef DO_
}

void ReceiveMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.ReceiveMessageRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ReceiveMessageRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.ReceiveMessageRequest)
}

::google::protobuf::uint8* ReceiveMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.ReceiveMessageRequest)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ReceiveMessageRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.ReceiveMessageRequest)
  return target;
}

int ReceiveMessageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.ReceiveMessageRequest)
  int total_size = 0;

  // optional string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.ReceiveMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReceiveMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceiveMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.ReceiveMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.ReceiveMessageRequest)
    MergeFrom(*source);
  }
}

void ReceiveMessageRequest::MergeFrom(const ReceiveMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.ReceiveMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void ReceiveMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.ReceiveMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveMessageRequest::CopyFrom(const ReceiveMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.ReceiveMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveMessageRequest::IsInitialized() const {

  return true;
}

void ReceiveMessageRequest::Swap(ReceiveMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReceiveMessageRequest::InternalSwap(ReceiveMessageRequest* other) {
  user_.Swap(&other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReceiveMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveMessageRequest_descriptor_;
  metadata.reflection = ReceiveMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReceiveMessageRequest

// optional string user = 1;
void ReceiveMessageRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReceiveMessageRequest::user() const {
  // @@protoc_insertion_point(field_get:chatserver.ReceiveMessageRequest.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReceiveMessageRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.ReceiveMessageRequest.user)
}
 void ReceiveMessageRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.ReceiveMessageRequest.user)
}
 void ReceiveMessageRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.ReceiveMessageRequest.user)
}
 ::std::string* ReceiveMessageRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.ReceiveMessageRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReceiveMessageRequest::release_user() {
  // @@protoc_insertion_point(field_release:chatserver.ReceiveMessageRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReceiveMessageRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:chatserver.ReceiveMessageRequest.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceiveMessageReply::kConformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceiveMessageReply::ReceiveMessageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.ReceiveMessageReply)
}

void ReceiveMessageReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReceiveMessageReply::ReceiveMessageReply(const ReceiveMessageReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.ReceiveMessageReply)
}

void ReceiveMessageReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conformation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReceiveMessageReply::~ReceiveMessageReply() {
  // @@protoc_insertion_point(destructor:chatserver.ReceiveMessageReply)
  SharedDtor();
}

void ReceiveMessageReply::SharedDtor() {
  conformation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReceiveMessageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveMessageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveMessageReply_descriptor_;
}

const ReceiveMessageReply& ReceiveMessageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

ReceiveMessageReply* ReceiveMessageReply::default_instance_ = NULL;

ReceiveMessageReply* ReceiveMessageReply::New(::google::protobuf::Arena* arena) const {
  ReceiveMessageReply* n = new ReceiveMessageReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReceiveMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.ReceiveMessageReply)
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReceiveMessageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.ReceiveMessageReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string conformation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conformation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conformation().data(), this->conformation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.ReceiveMessageReply.conformation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.ReceiveMessageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.ReceiveMessageReply)
  return false;
#undef DO_
}

void ReceiveMessageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.ReceiveMessageReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ReceiveMessageReply.conformation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->conformation(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.ReceiveMessageReply)
}

::google::protobuf::uint8* ReceiveMessageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.ReceiveMessageReply)
  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conformation().data(), this->conformation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ReceiveMessageReply.conformation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->conformation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.ReceiveMessageReply)
  return target;
}

int ReceiveMessageReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.ReceiveMessageReply)
  int total_size = 0;

  // optional string conformation = 1;
  if (this->conformation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conformation());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveMessageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.ReceiveMessageReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReceiveMessageReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceiveMessageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.ReceiveMessageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.ReceiveMessageReply)
    MergeFrom(*source);
  }
}

void ReceiveMessageReply::MergeFrom(const ReceiveMessageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.ReceiveMessageReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.conformation().size() > 0) {

    conformation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conformation_);
  }
}

void ReceiveMessageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.ReceiveMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveMessageReply::CopyFrom(const ReceiveMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.ReceiveMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveMessageReply::IsInitialized() const {

  return true;
}

void ReceiveMessageReply::Swap(ReceiveMessageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReceiveMessageReply::InternalSwap(ReceiveMessageReply* other) {
  conformation_.Swap(&other->conformation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReceiveMessageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveMessageReply_descriptor_;
  metadata.reflection = ReceiveMessageReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReceiveMessageReply

// optional string conformation = 1;
void ReceiveMessageReply::clear_conformation() {
  conformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReceiveMessageReply::conformation() const {
  // @@protoc_insertion_point(field_get:chatserver.ReceiveMessageReply.conformation)
  return conformation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReceiveMessageReply::set_conformation(const ::std::string& value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.ReceiveMessageReply.conformation)
}
 void ReceiveMessageReply::set_conformation(const char* value) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.ReceiveMessageReply.conformation)
}
 void ReceiveMessageReply::set_conformation(const char* value, size_t size) {
  
  conformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.ReceiveMessageReply.conformation)
}
 ::std::string* ReceiveMessageReply::mutable_conformation() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.ReceiveMessageReply.conformation)
  return conformation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReceiveMessageReply::release_conformation() {
  // @@protoc_insertion_point(field_release:chatserver.ReceiveMessageReply.conformation)
  
  return conformation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReceiveMessageReply::set_allocated_conformation(::std::string* conformation) {
  if (conformation != NULL) {
    
  } else {
    
  }
  conformation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conformation);
  // @@protoc_insertion_point(field_set_allocated:chatserver.ReceiveMessageReply.conformation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRequest::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRequest::ListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.ListRequest)
}

void ListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListRequest::ListRequest(const ListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.ListRequest)
}

void ListRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListRequest::~ListRequest() {
  // @@protoc_insertion_point(destructor:chatserver.ListRequest)
  SharedDtor();
}

void ListRequest::SharedDtor() {
  list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRequest_descriptor_;
}

const ListRequest& ListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

ListRequest* ListRequest::default_instance_ = NULL;

ListRequest* ListRequest::New(::google::protobuf::Arena* arena) const {
  ListRequest* n = new ListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.ListRequest)
  list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.ListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string list = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list().data(), this->list().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.ListRequest.list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.ListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.ListRequest)
  return false;
#undef DO_
}

void ListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.ListRequest)
  // optional string list = 1;
  if (this->list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ListRequest.list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->list(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.ListRequest)
}

::google::protobuf::uint8* ListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.ListRequest)
  // optional string list = 1;
  if (this->list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ListRequest.list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->list(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.ListRequest)
  return target;
}

int ListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.ListRequest)
  int total_size = 0;

  // optional string list = 1;
  if (this->list().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->list());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.ListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.ListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.ListRequest)
    MergeFrom(*source);
  }
}

void ListRequest::MergeFrom(const ListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.ListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.list().size() > 0) {

    list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_);
  }
}

void ListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.ListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRequest::CopyFrom(const ListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.ListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {

  return true;
}

void ListRequest::Swap(ListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRequest::InternalSwap(ListRequest* other) {
  list_.Swap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRequest_descriptor_;
  metadata.reflection = ListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRequest

// optional string list = 1;
void ListRequest::clear_list() {
  list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListRequest::list() const {
  // @@protoc_insertion_point(field_get:chatserver.ListRequest.list)
  return list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_list(const ::std::string& value) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.ListRequest.list)
}
 void ListRequest::set_list(const char* value) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.ListRequest.list)
}
 void ListRequest::set_list(const char* value, size_t size) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.ListRequest.list)
}
 ::std::string* ListRequest::mutable_list() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.ListRequest.list)
  return list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListRequest::release_list() {
  // @@protoc_insertion_point(field_release:chatserver.ListRequest.list)
  
  return list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_allocated_list(::std::string* list) {
  if (list != NULL) {
    
  } else {
    
  }
  list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list);
  // @@protoc_insertion_point(field_set_allocated:chatserver.ListRequest.list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListReply::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListReply::ListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.ListReply)
}

void ListReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListReply::ListReply(const ListReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.ListReply)
}

void ListReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListReply::~ListReply() {
  // @@protoc_insertion_point(destructor:chatserver.ListReply)
  SharedDtor();
}

void ListReply::SharedDtor() {
  list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListReply_descriptor_;
}

const ListReply& ListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

ListReply* ListReply::default_instance_ = NULL;

ListReply* ListReply::New(::google::protobuf::Arena* arena) const {
  ListReply* n = new ListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.ListReply)
  list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.ListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string list = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list().data(), this->list().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatserver.ListReply.list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.ListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.ListReply)
  return false;
#undef DO_
}

void ListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.ListReply)
  // optional string list = 1;
  if (this->list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ListReply.list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->list(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.ListReply)
}

::google::protobuf::uint8* ListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.ListReply)
  // optional string list = 1;
  if (this->list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatserver.ListReply.list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->list(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.ListReply)
  return target;
}

int ListReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.ListReply)
  int total_size = 0;

  // optional string list = 1;
  if (this->list().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->list());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.ListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.ListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.ListReply)
    MergeFrom(*source);
  }
}

void ListReply::MergeFrom(const ListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.ListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.list().size() > 0) {

    list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_);
  }
}

void ListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.ListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListReply::CopyFrom(const ListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.ListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListReply::IsInitialized() const {

  return true;
}

void ListReply::Swap(ListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListReply::InternalSwap(ListReply* other) {
  list_.Swap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListReply_descriptor_;
  metadata.reflection = ListReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListReply

// optional string list = 1;
void ListReply::clear_list() {
  list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListReply::list() const {
  // @@protoc_insertion_point(field_get:chatserver.ListReply.list)
  return list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListReply::set_list(const ::std::string& value) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatserver.ListReply.list)
}
 void ListReply::set_list(const char* value) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatserver.ListReply.list)
}
 void ListReply::set_list(const char* value, size_t size) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatserver.ListReply.list)
}
 ::std::string* ListReply::mutable_list() {
  
  // @@protoc_insertion_point(field_mutable:chatserver.ListReply.list)
  return list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListReply::release_list() {
  // @@protoc_insertion_point(field_release:chatserver.ListReply.list)
  
  return list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListReply::set_allocated_list(::std::string* list) {
  if (list != NULL) {
    
  } else {
    
  }
  list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list);
  // @@protoc_insertion_point(field_set_allocated:chatserver.ListReply.list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListM::kReplyFieldNumber;
const int ListM::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListM::ListM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.ListM)
}

void ListM::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  reply_ = const_cast< ::chatserver::ListReply*>(&::chatserver::ListReply::default_instance());
  request_ = const_cast< ::chatserver::ListRequest*>(&::chatserver::ListRequest::default_instance());
}

ListM::ListM(const ListM& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.ListM)
}

void ListM::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reply_ = NULL;
  request_ = NULL;
}

ListM::~ListM() {
  // @@protoc_insertion_point(destructor:chatserver.ListM)
  SharedDtor();
}

void ListM::SharedDtor() {
  if (this != default_instance_) {
    delete reply_;
    delete request_;
  }
}

void ListM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListM_descriptor_;
}

const ListM& ListM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

ListM* ListM::default_instance_ = NULL;

ListM* ListM::New(::google::protobuf::Arena* arena) const {
  ListM* n = new ListM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListM::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.ListM)
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}

bool ListM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.ListM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chatserver.ListReply reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .chatserver.ListRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.ListM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.ListM)
  return false;
#undef DO_
}

void ListM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.ListM)
  // optional .chatserver.ListReply reply = 1;
  if (this->has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reply_, output);
  }

  // optional .chatserver.ListRequest request = 2;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.ListM)
}

::google::protobuf::uint8* ListM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.ListM)
  // optional .chatserver.ListReply reply = 1;
  if (this->has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reply_, false, target);
  }

  // optional .chatserver.ListRequest request = 2;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.ListM)
  return target;
}

int ListM::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.ListM)
  int total_size = 0;

  // optional .chatserver.ListReply reply = 1;
  if (this->has_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reply_);
  }

  // optional .chatserver.ListRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.ListM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListM* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.ListM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.ListM)
    MergeFrom(*source);
  }
}

void ListM::MergeFrom(const ListM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.ListM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_reply()) {
    mutable_reply()->::chatserver::ListReply::MergeFrom(from.reply());
  }
  if (from.has_request()) {
    mutable_request()->::chatserver::ListRequest::MergeFrom(from.request());
  }
}

void ListM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.ListM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListM::CopyFrom(const ListM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.ListM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListM::IsInitialized() const {

  return true;
}

void ListM::Swap(ListM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListM::InternalSwap(ListM* other) {
  std::swap(reply_, other->reply_);
  std::swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListM_descriptor_;
  metadata.reflection = ListM_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListM

// optional .chatserver.ListReply reply = 1;
bool ListM::has_reply() const {
  return !_is_default_instance_ && reply_ != NULL;
}
void ListM::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
}
const ::chatserver::ListReply& ListM::reply() const {
  // @@protoc_insertion_point(field_get:chatserver.ListM.reply)
  return reply_ != NULL ? *reply_ : *default_instance_->reply_;
}
::chatserver::ListReply* ListM::mutable_reply() {
  
  if (reply_ == NULL) {
    reply_ = new ::chatserver::ListReply;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.ListM.reply)
  return reply_;
}
::chatserver::ListReply* ListM::release_reply() {
  // @@protoc_insertion_point(field_release:chatserver.ListM.reply)
  
  ::chatserver::ListReply* temp = reply_;
  reply_ = NULL;
  return temp;
}
void ListM::set_allocated_reply(::chatserver::ListReply* reply) {
  delete reply_;
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.ListM.reply)
}

// optional .chatserver.ListRequest request = 2;
bool ListM::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void ListM::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::chatserver::ListRequest& ListM::request() const {
  // @@protoc_insertion_point(field_get:chatserver.ListM.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::chatserver::ListRequest* ListM::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::chatserver::ListRequest;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.ListM.request)
  return request_;
}
::chatserver::ListRequest* ListM::release_request() {
  // @@protoc_insertion_point(field_release:chatserver.ListM.request)
  
  ::chatserver::ListRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void ListM::set_allocated_request(::chatserver::ListRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.ListM.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceiveMessageM::kReplyFieldNumber;
const int ReceiveMessageM::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceiveMessageM::ReceiveMessageM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.ReceiveMessageM)
}

void ReceiveMessageM::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  reply_ = const_cast< ::chatserver::ReceiveMessageReply*>(&::chatserver::ReceiveMessageReply::default_instance());
  request_ = const_cast< ::chatserver::ReceiveMessageRequest*>(&::chatserver::ReceiveMessageRequest::default_instance());
}

ReceiveMessageM::ReceiveMessageM(const ReceiveMessageM& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.ReceiveMessageM)
}

void ReceiveMessageM::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reply_ = NULL;
  request_ = NULL;
}

ReceiveMessageM::~ReceiveMessageM() {
  // @@protoc_insertion_point(destructor:chatserver.ReceiveMessageM)
  SharedDtor();
}

void ReceiveMessageM::SharedDtor() {
  if (this != default_instance_) {
    delete reply_;
    delete request_;
  }
}

void ReceiveMessageM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveMessageM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveMessageM_descriptor_;
}

const ReceiveMessageM& ReceiveMessageM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

ReceiveMessageM* ReceiveMessageM::default_instance_ = NULL;

ReceiveMessageM* ReceiveMessageM::New(::google::protobuf::Arena* arena) const {
  ReceiveMessageM* n = new ReceiveMessageM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReceiveMessageM::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.ReceiveMessageM)
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}

bool ReceiveMessageM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.ReceiveMessageM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chatserver.ReceiveMessageReply reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .chatserver.ReceiveMessageRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.ReceiveMessageM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.ReceiveMessageM)
  return false;
#undef DO_
}

void ReceiveMessageM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.ReceiveMessageM)
  // optional .chatserver.ReceiveMessageReply reply = 1;
  if (this->has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reply_, output);
  }

  // optional .chatserver.ReceiveMessageRequest request = 2;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.ReceiveMessageM)
}

::google::protobuf::uint8* ReceiveMessageM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.ReceiveMessageM)
  // optional .chatserver.ReceiveMessageReply reply = 1;
  if (this->has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reply_, false, target);
  }

  // optional .chatserver.ReceiveMessageRequest request = 2;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.ReceiveMessageM)
  return target;
}

int ReceiveMessageM::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.ReceiveMessageM)
  int total_size = 0;

  // optional .chatserver.ReceiveMessageReply reply = 1;
  if (this->has_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reply_);
  }

  // optional .chatserver.ReceiveMessageRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveMessageM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.ReceiveMessageM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReceiveMessageM* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceiveMessageM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.ReceiveMessageM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.ReceiveMessageM)
    MergeFrom(*source);
  }
}

void ReceiveMessageM::MergeFrom(const ReceiveMessageM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.ReceiveMessageM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_reply()) {
    mutable_reply()->::chatserver::ReceiveMessageReply::MergeFrom(from.reply());
  }
  if (from.has_request()) {
    mutable_request()->::chatserver::ReceiveMessageRequest::MergeFrom(from.request());
  }
}

void ReceiveMessageM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.ReceiveMessageM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveMessageM::CopyFrom(const ReceiveMessageM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.ReceiveMessageM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveMessageM::IsInitialized() const {

  return true;
}

void ReceiveMessageM::Swap(ReceiveMessageM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReceiveMessageM::InternalSwap(ReceiveMessageM* other) {
  std::swap(reply_, other->reply_);
  std::swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReceiveMessageM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveMessageM_descriptor_;
  metadata.reflection = ReceiveMessageM_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReceiveMessageM

// optional .chatserver.ReceiveMessageReply reply = 1;
bool ReceiveMessageM::has_reply() const {
  return !_is_default_instance_ && reply_ != NULL;
}
void ReceiveMessageM::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
}
const ::chatserver::ReceiveMessageReply& ReceiveMessageM::reply() const {
  // @@protoc_insertion_point(field_get:chatserver.ReceiveMessageM.reply)
  return reply_ != NULL ? *reply_ : *default_instance_->reply_;
}
::chatserver::ReceiveMessageReply* ReceiveMessageM::mutable_reply() {
  
  if (reply_ == NULL) {
    reply_ = new ::chatserver::ReceiveMessageReply;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.ReceiveMessageM.reply)
  return reply_;
}
::chatserver::ReceiveMessageReply* ReceiveMessageM::release_reply() {
  // @@protoc_insertion_point(field_release:chatserver.ReceiveMessageM.reply)
  
  ::chatserver::ReceiveMessageReply* temp = reply_;
  reply_ = NULL;
  return temp;
}
void ReceiveMessageM::set_allocated_reply(::chatserver::ReceiveMessageReply* reply) {
  delete reply_;
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.ReceiveMessageM.reply)
}

// optional .chatserver.ReceiveMessageRequest request = 2;
bool ReceiveMessageM::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void ReceiveMessageM::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::chatserver::ReceiveMessageRequest& ReceiveMessageM::request() const {
  // @@protoc_insertion_point(field_get:chatserver.ReceiveMessageM.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::chatserver::ReceiveMessageRequest* ReceiveMessageM::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::chatserver::ReceiveMessageRequest;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.ReceiveMessageM.request)
  return request_;
}
::chatserver::ReceiveMessageRequest* ReceiveMessageM::release_request() {
  // @@protoc_insertion_point(field_release:chatserver.ReceiveMessageM.request)
  
  ::chatserver::ReceiveMessageRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void ReceiveMessageM::set_allocated_request(::chatserver::ReceiveMessageRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.ReceiveMessageM.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMessageM::kReplyFieldNumber;
const int SendMessageM::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMessageM::SendMessageM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.SendMessageM)
}

void SendMessageM::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  reply_ = const_cast< ::chatserver::SendMessageReply*>(&::chatserver::SendMessageReply::default_instance());
  request_ = const_cast< ::chatserver::SendMessageRequest*>(&::chatserver::SendMessageRequest::default_instance());
}

SendMessageM::SendMessageM(const SendMessageM& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.SendMessageM)
}

void SendMessageM::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reply_ = NULL;
  request_ = NULL;
}

SendMessageM::~SendMessageM() {
  // @@protoc_insertion_point(destructor:chatserver.SendMessageM)
  SharedDtor();
}

void SendMessageM::SharedDtor() {
  if (this != default_instance_) {
    delete reply_;
    delete request_;
  }
}

void SendMessageM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageM_descriptor_;
}

const SendMessageM& SendMessageM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

SendMessageM* SendMessageM::default_instance_ = NULL;

SendMessageM* SendMessageM::New(::google::protobuf::Arena* arena) const {
  SendMessageM* n = new SendMessageM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMessageM::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.SendMessageM)
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}

bool SendMessageM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.SendMessageM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chatserver.SendMessageReply reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .chatserver.SendMessageRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.SendMessageM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.SendMessageM)
  return false;
#undef DO_
}

void SendMessageM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.SendMessageM)
  // optional .chatserver.SendMessageReply reply = 1;
  if (this->has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reply_, output);
  }

  // optional .chatserver.SendMessageRequest request = 2;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.SendMessageM)
}

::google::protobuf::uint8* SendMessageM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.SendMessageM)
  // optional .chatserver.SendMessageReply reply = 1;
  if (this->has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reply_, false, target);
  }

  // optional .chatserver.SendMessageRequest request = 2;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.SendMessageM)
  return target;
}

int SendMessageM::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.SendMessageM)
  int total_size = 0;

  // optional .chatserver.SendMessageReply reply = 1;
  if (this->has_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reply_);
  }

  // optional .chatserver.SendMessageRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.SendMessageM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SendMessageM* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.SendMessageM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.SendMessageM)
    MergeFrom(*source);
  }
}

void SendMessageM::MergeFrom(const SendMessageM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.SendMessageM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_reply()) {
    mutable_reply()->::chatserver::SendMessageReply::MergeFrom(from.reply());
  }
  if (from.has_request()) {
    mutable_request()->::chatserver::SendMessageRequest::MergeFrom(from.request());
  }
}

void SendMessageM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.SendMessageM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageM::CopyFrom(const SendMessageM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.SendMessageM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageM::IsInitialized() const {

  return true;
}

void SendMessageM::Swap(SendMessageM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMessageM::InternalSwap(SendMessageM* other) {
  std::swap(reply_, other->reply_);
  std::swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendMessageM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageM_descriptor_;
  metadata.reflection = SendMessageM_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMessageM

// optional .chatserver.SendMessageReply reply = 1;
bool SendMessageM::has_reply() const {
  return !_is_default_instance_ && reply_ != NULL;
}
void SendMessageM::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
}
const ::chatserver::SendMessageReply& SendMessageM::reply() const {
  // @@protoc_insertion_point(field_get:chatserver.SendMessageM.reply)
  return reply_ != NULL ? *reply_ : *default_instance_->reply_;
}
::chatserver::SendMessageReply* SendMessageM::mutable_reply() {
  
  if (reply_ == NULL) {
    reply_ = new ::chatserver::SendMessageReply;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.SendMessageM.reply)
  return reply_;
}
::chatserver::SendMessageReply* SendMessageM::release_reply() {
  // @@protoc_insertion_point(field_release:chatserver.SendMessageM.reply)
  
  ::chatserver::SendMessageReply* temp = reply_;
  reply_ = NULL;
  return temp;
}
void SendMessageM::set_allocated_reply(::chatserver::SendMessageReply* reply) {
  delete reply_;
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.SendMessageM.reply)
}

// optional .chatserver.SendMessageRequest request = 2;
bool SendMessageM::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void SendMessageM::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::chatserver::SendMessageRequest& SendMessageM::request() const {
  // @@protoc_insertion_point(field_get:chatserver.SendMessageM.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::chatserver::SendMessageRequest* SendMessageM::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::chatserver::SendMessageRequest;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.SendMessageM.request)
  return request_;
}
::chatserver::SendMessageRequest* SendMessageM::release_request() {
  // @@protoc_insertion_point(field_release:chatserver.SendMessageM.request)
  
  ::chatserver::SendMessageRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void SendMessageM::set_allocated_request(::chatserver::SendMessageRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.SendMessageM.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogInM::kReplyFieldNumber;
const int LogInM::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogInM::LogInM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.LogInM)
}

void LogInM::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  reply_ = const_cast< ::chatserver::LogInReply*>(&::chatserver::LogInReply::default_instance());
  request_ = const_cast< ::chatserver::LogInRequest*>(&::chatserver::LogInRequest::default_instance());
}

LogInM::LogInM(const LogInM& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.LogInM)
}

void LogInM::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reply_ = NULL;
  request_ = NULL;
}

LogInM::~LogInM() {
  // @@protoc_insertion_point(destructor:chatserver.LogInM)
  SharedDtor();
}

void LogInM::SharedDtor() {
  if (this != default_instance_) {
    delete reply_;
    delete request_;
  }
}

void LogInM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogInM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogInM_descriptor_;
}

const LogInM& LogInM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

LogInM* LogInM::default_instance_ = NULL;

LogInM* LogInM::New(::google::protobuf::Arena* arena) const {
  LogInM* n = new LogInM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogInM::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.LogInM)
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}

bool LogInM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.LogInM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chatserver.LogInReply reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .chatserver.LogInRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.LogInM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.LogInM)
  return false;
#undef DO_
}

void LogInM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.LogInM)
  // optional .chatserver.LogInReply reply = 1;
  if (this->has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reply_, output);
  }

  // optional .chatserver.LogInRequest request = 2;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.LogInM)
}

::google::protobuf::uint8* LogInM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.LogInM)
  // optional .chatserver.LogInReply reply = 1;
  if (this->has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reply_, false, target);
  }

  // optional .chatserver.LogInRequest request = 2;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.LogInM)
  return target;
}

int LogInM::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.LogInM)
  int total_size = 0;

  // optional .chatserver.LogInReply reply = 1;
  if (this->has_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reply_);
  }

  // optional .chatserver.LogInRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.LogInM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogInM* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogInM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.LogInM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.LogInM)
    MergeFrom(*source);
  }
}

void LogInM::MergeFrom(const LogInM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.LogInM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_reply()) {
    mutable_reply()->::chatserver::LogInReply::MergeFrom(from.reply());
  }
  if (from.has_request()) {
    mutable_request()->::chatserver::LogInRequest::MergeFrom(from.request());
  }
}

void LogInM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.LogInM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInM::CopyFrom(const LogInM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.LogInM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInM::IsInitialized() const {

  return true;
}

void LogInM::Swap(LogInM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogInM::InternalSwap(LogInM* other) {
  std::swap(reply_, other->reply_);
  std::swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogInM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogInM_descriptor_;
  metadata.reflection = LogInM_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogInM

// optional .chatserver.LogInReply reply = 1;
bool LogInM::has_reply() const {
  return !_is_default_instance_ && reply_ != NULL;
}
void LogInM::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
}
const ::chatserver::LogInReply& LogInM::reply() const {
  // @@protoc_insertion_point(field_get:chatserver.LogInM.reply)
  return reply_ != NULL ? *reply_ : *default_instance_->reply_;
}
::chatserver::LogInReply* LogInM::mutable_reply() {
  
  if (reply_ == NULL) {
    reply_ = new ::chatserver::LogInReply;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.LogInM.reply)
  return reply_;
}
::chatserver::LogInReply* LogInM::release_reply() {
  // @@protoc_insertion_point(field_release:chatserver.LogInM.reply)
  
  ::chatserver::LogInReply* temp = reply_;
  reply_ = NULL;
  return temp;
}
void LogInM::set_allocated_reply(::chatserver::LogInReply* reply) {
  delete reply_;
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogInM.reply)
}

// optional .chatserver.LogInRequest request = 2;
bool LogInM::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void LogInM::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::chatserver::LogInRequest& LogInM::request() const {
  // @@protoc_insertion_point(field_get:chatserver.LogInM.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::chatserver::LogInRequest* LogInM::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::chatserver::LogInRequest;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.LogInM.request)
  return request_;
}
::chatserver::LogInRequest* LogInM::release_request() {
  // @@protoc_insertion_point(field_release:chatserver.LogInM.request)
  
  ::chatserver::LogInRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void LogInM::set_allocated_request(::chatserver::LogInRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogInM.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogOutM::kReplyFieldNumber;
const int LogOutM::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogOutM::LogOutM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.LogOutM)
}

void LogOutM::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  reply_ = const_cast< ::chatserver::LogOutReply*>(&::chatserver::LogOutReply::default_instance());
  request_ = const_cast< ::chatserver::LogOutRequest*>(&::chatserver::LogOutRequest::default_instance());
}

LogOutM::LogOutM(const LogOutM& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.LogOutM)
}

void LogOutM::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reply_ = NULL;
  request_ = NULL;
}

LogOutM::~LogOutM() {
  // @@protoc_insertion_point(destructor:chatserver.LogOutM)
  SharedDtor();
}

void LogOutM::SharedDtor() {
  if (this != default_instance_) {
    delete reply_;
    delete request_;
  }
}

void LogOutM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOutM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOutM_descriptor_;
}

const LogOutM& LogOutM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

LogOutM* LogOutM::default_instance_ = NULL;

LogOutM* LogOutM::New(::google::protobuf::Arena* arena) const {
  LogOutM* n = new LogOutM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogOutM::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.LogOutM)
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}

bool LogOutM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.LogOutM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chatserver.LogOutReply reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .chatserver.LogOutRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.LogOutM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.LogOutM)
  return false;
#undef DO_
}

void LogOutM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.LogOutM)
  // optional .chatserver.LogOutReply reply = 1;
  if (this->has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reply_, output);
  }

  // optional .chatserver.LogOutRequest request = 2;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.LogOutM)
}

::google::protobuf::uint8* LogOutM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.LogOutM)
  // optional .chatserver.LogOutReply reply = 1;
  if (this->has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reply_, false, target);
  }

  // optional .chatserver.LogOutRequest request = 2;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.LogOutM)
  return target;
}

int LogOutM::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.LogOutM)
  int total_size = 0;

  // optional .chatserver.LogOutReply reply = 1;
  if (this->has_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reply_);
  }

  // optional .chatserver.LogOutRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOutM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.LogOutM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogOutM* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogOutM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.LogOutM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.LogOutM)
    MergeFrom(*source);
  }
}

void LogOutM::MergeFrom(const LogOutM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.LogOutM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_reply()) {
    mutable_reply()->::chatserver::LogOutReply::MergeFrom(from.reply());
  }
  if (from.has_request()) {
    mutable_request()->::chatserver::LogOutRequest::MergeFrom(from.request());
  }
}

void LogOutM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.LogOutM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOutM::CopyFrom(const LogOutM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.LogOutM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOutM::IsInitialized() const {

  return true;
}

void LogOutM::Swap(LogOutM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogOutM::InternalSwap(LogOutM* other) {
  std::swap(reply_, other->reply_);
  std::swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogOutM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOutM_descriptor_;
  metadata.reflection = LogOutM_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogOutM

// optional .chatserver.LogOutReply reply = 1;
bool LogOutM::has_reply() const {
  return !_is_default_instance_ && reply_ != NULL;
}
void LogOutM::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) delete reply_;
  reply_ = NULL;
}
const ::chatserver::LogOutReply& LogOutM::reply() const {
  // @@protoc_insertion_point(field_get:chatserver.LogOutM.reply)
  return reply_ != NULL ? *reply_ : *default_instance_->reply_;
}
::chatserver::LogOutReply* LogOutM::mutable_reply() {
  
  if (reply_ == NULL) {
    reply_ = new ::chatserver::LogOutReply;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.LogOutM.reply)
  return reply_;
}
::chatserver::LogOutReply* LogOutM::release_reply() {
  // @@protoc_insertion_point(field_release:chatserver.LogOutM.reply)
  
  ::chatserver::LogOutReply* temp = reply_;
  reply_ = NULL;
  return temp;
}
void LogOutM::set_allocated_reply(::chatserver::LogOutReply* reply) {
  delete reply_;
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogOutM.reply)
}

// optional .chatserver.LogOutRequest request = 2;
bool LogOutM::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void LogOutM::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::chatserver::LogOutRequest& LogOutM::request() const {
  // @@protoc_insertion_point(field_get:chatserver.LogOutM.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::chatserver::LogOutRequest* LogOutM::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::chatserver::LogOutRequest;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.LogOutM.request)
  return request_;
}
::chatserver::LogOutRequest* LogOutM::release_request() {
  // @@protoc_insertion_point(field_release:chatserver.LogOutM.request)
  
  ::chatserver::LogOutRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void LogOutM::set_allocated_request(::chatserver::LogOutRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.LogOutM.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oneOfTypes::kLogoutFieldNumber;
const int oneOfTypes::kLoginFieldNumber;
const int oneOfTypes::kSendmessageFieldNumber;
const int oneOfTypes::kReceivemessageFieldNumber;
const int oneOfTypes::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oneOfTypes::oneOfTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatserver.oneOfTypes)
}

void oneOfTypes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  oneOfTypes_default_oneof_instance_->logout_ = const_cast< ::chatserver::LogOutM*>(&::chatserver::LogOutM::default_instance());
  oneOfTypes_default_oneof_instance_->login_ = const_cast< ::chatserver::LogInM*>(&::chatserver::LogInM::default_instance());
  oneOfTypes_default_oneof_instance_->sendmessage_ = const_cast< ::chatserver::SendMessageM*>(&::chatserver::SendMessageM::default_instance());
  oneOfTypes_default_oneof_instance_->receivemessage_ = const_cast< ::chatserver::ReceiveMessageM*>(&::chatserver::ReceiveMessageM::default_instance());
  oneOfTypes_default_oneof_instance_->list_ = const_cast< ::chatserver::ListM*>(&::chatserver::ListM::default_instance());
}

oneOfTypes::oneOfTypes(const oneOfTypes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatserver.oneOfTypes)
}

void oneOfTypes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_types();
}

oneOfTypes::~oneOfTypes() {
  // @@protoc_insertion_point(destructor:chatserver.oneOfTypes)
  SharedDtor();
}

void oneOfTypes::SharedDtor() {
  if (has_types()) {
    clear_types();
  }
  if (this != default_instance_) {
  }
}

void oneOfTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oneOfTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return oneOfTypes_descriptor_;
}

const oneOfTypes& oneOfTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatserver_2eproto();
  return *default_instance_;
}

oneOfTypes* oneOfTypes::default_instance_ = NULL;

oneOfTypes* oneOfTypes::New(::google::protobuf::Arena* arena) const {
  oneOfTypes* n = new oneOfTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oneOfTypes::clear_types() {
// @@protoc_insertion_point(one_of_clear_start:chatserver.oneOfTypes)
  switch(types_case()) {
    case kLogout: {
      delete types_.logout_;
      break;
    }
    case kLogin: {
      delete types_.login_;
      break;
    }
    case kSendmessage: {
      delete types_.sendmessage_;
      break;
    }
    case kReceivemessage: {
      delete types_.receivemessage_;
      break;
    }
    case kList: {
      delete types_.list_;
      break;
    }
    case TYPES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPES_NOT_SET;
}


void oneOfTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:chatserver.oneOfTypes)
  clear_types();
}

bool oneOfTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatserver.oneOfTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chatserver.LogOutM logout = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional .chatserver.LogInM login = 2;
      case 2: {
        if (tag == 18) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sendmessage;
        break;
      }

      // optional .chatserver.SendMessageM sendmessage = 3;
      case 3: {
        if (tag == 26) {
         parse_sendmessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_receivemessage;
        break;
      }

      // optional .chatserver.ReceiveMessageM receivemessage = 4;
      case 4: {
        if (tag == 34) {
         parse_receivemessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receivemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }

      // optional .chatserver.ListM list = 5;
      case 5: {
        if (tag == 42) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatserver.oneOfTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatserver.oneOfTypes)
  return false;
#undef DO_
}

void oneOfTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatserver.oneOfTypes)
  // optional .chatserver.LogOutM logout = 1;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *types_.logout_, output);
  }

  // optional .chatserver.LogInM login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *types_.login_, output);
  }

  // optional .chatserver.SendMessageM sendmessage = 3;
  if (has_sendmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *types_.sendmessage_, output);
  }

  // optional .chatserver.ReceiveMessageM receivemessage = 4;
  if (has_receivemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *types_.receivemessage_, output);
  }

  // optional .chatserver.ListM list = 5;
  if (has_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *types_.list_, output);
  }

  // @@protoc_insertion_point(serialize_end:chatserver.oneOfTypes)
}

::google::protobuf::uint8* oneOfTypes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatserver.oneOfTypes)
  // optional .chatserver.LogOutM logout = 1;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *types_.logout_, false, target);
  }

  // optional .chatserver.LogInM login = 2;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *types_.login_, false, target);
  }

  // optional .chatserver.SendMessageM sendmessage = 3;
  if (has_sendmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *types_.sendmessage_, false, target);
  }

  // optional .chatserver.ReceiveMessageM receivemessage = 4;
  if (has_receivemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *types_.receivemessage_, false, target);
  }

  // optional .chatserver.ListM list = 5;
  if (has_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *types_.list_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatserver.oneOfTypes)
  return target;
}

int oneOfTypes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatserver.oneOfTypes)
  int total_size = 0;

  switch (types_case()) {
    // optional .chatserver.LogOutM logout = 1;
    case kLogout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *types_.logout_);
      break;
    }
    // optional .chatserver.LogInM login = 2;
    case kLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *types_.login_);
      break;
    }
    // optional .chatserver.SendMessageM sendmessage = 3;
    case kSendmessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *types_.sendmessage_);
      break;
    }
    // optional .chatserver.ReceiveMessageM receivemessage = 4;
    case kReceivemessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *types_.receivemessage_);
      break;
    }
    // optional .chatserver.ListM list = 5;
    case kList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *types_.list_);
      break;
    }
    case TYPES_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oneOfTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatserver.oneOfTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const oneOfTypes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const oneOfTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatserver.oneOfTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatserver.oneOfTypes)
    MergeFrom(*source);
  }
}

void oneOfTypes::MergeFrom(const oneOfTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatserver.oneOfTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.types_case()) {
    case kLogout: {
      mutable_logout()->::chatserver::LogOutM::MergeFrom(from.logout());
      break;
    }
    case kLogin: {
      mutable_login()->::chatserver::LogInM::MergeFrom(from.login());
      break;
    }
    case kSendmessage: {
      mutable_sendmessage()->::chatserver::SendMessageM::MergeFrom(from.sendmessage());
      break;
    }
    case kReceivemessage: {
      mutable_receivemessage()->::chatserver::ReceiveMessageM::MergeFrom(from.receivemessage());
      break;
    }
    case kList: {
      mutable_list()->::chatserver::ListM::MergeFrom(from.list());
      break;
    }
    case TYPES_NOT_SET: {
      break;
    }
  }
}

void oneOfTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatserver.oneOfTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oneOfTypes::CopyFrom(const oneOfTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatserver.oneOfTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oneOfTypes::IsInitialized() const {

  return true;
}

void oneOfTypes::Swap(oneOfTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oneOfTypes::InternalSwap(oneOfTypes* other) {
  std::swap(types_, other->types_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oneOfTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = oneOfTypes_descriptor_;
  metadata.reflection = oneOfTypes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oneOfTypes

// optional .chatserver.LogOutM logout = 1;
bool oneOfTypes::has_logout() const {
  return types_case() == kLogout;
}
void oneOfTypes::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
void oneOfTypes::clear_logout() {
  if (has_logout()) {
    delete types_.logout_;
    clear_has_types();
  }
}
 const ::chatserver::LogOutM& oneOfTypes::logout() const {
  // @@protoc_insertion_point(field_get:chatserver.oneOfTypes.logout)
  return has_logout()
      ? *types_.logout_
      : ::chatserver::LogOutM::default_instance();
}
::chatserver::LogOutM* oneOfTypes::mutable_logout() {
  if (!has_logout()) {
    clear_types();
    set_has_logout();
    types_.logout_ = new ::chatserver::LogOutM;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.oneOfTypes.logout)
  return types_.logout_;
}
::chatserver::LogOutM* oneOfTypes::release_logout() {
  // @@protoc_insertion_point(field_release:chatserver.oneOfTypes.logout)
  if (has_logout()) {
    clear_has_types();
    ::chatserver::LogOutM* temp = types_.logout_;
    types_.logout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void oneOfTypes::set_allocated_logout(::chatserver::LogOutM* logout) {
  clear_types();
  if (logout) {
    set_has_logout();
    types_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.oneOfTypes.logout)
}

// optional .chatserver.LogInM login = 2;
bool oneOfTypes::has_login() const {
  return types_case() == kLogin;
}
void oneOfTypes::set_has_login() {
  _oneof_case_[0] = kLogin;
}
void oneOfTypes::clear_login() {
  if (has_login()) {
    delete types_.login_;
    clear_has_types();
  }
}
 const ::chatserver::LogInM& oneOfTypes::login() const {
  // @@protoc_insertion_point(field_get:chatserver.oneOfTypes.login)
  return has_login()
      ? *types_.login_
      : ::chatserver::LogInM::default_instance();
}
::chatserver::LogInM* oneOfTypes::mutable_login() {
  if (!has_login()) {
    clear_types();
    set_has_login();
    types_.login_ = new ::chatserver::LogInM;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.oneOfTypes.login)
  return types_.login_;
}
::chatserver::LogInM* oneOfTypes::release_login() {
  // @@protoc_insertion_point(field_release:chatserver.oneOfTypes.login)
  if (has_login()) {
    clear_has_types();
    ::chatserver::LogInM* temp = types_.login_;
    types_.login_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void oneOfTypes::set_allocated_login(::chatserver::LogInM* login) {
  clear_types();
  if (login) {
    set_has_login();
    types_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.oneOfTypes.login)
}

// optional .chatserver.SendMessageM sendmessage = 3;
bool oneOfTypes::has_sendmessage() const {
  return types_case() == kSendmessage;
}
void oneOfTypes::set_has_sendmessage() {
  _oneof_case_[0] = kSendmessage;
}
void oneOfTypes::clear_sendmessage() {
  if (has_sendmessage()) {
    delete types_.sendmessage_;
    clear_has_types();
  }
}
 const ::chatserver::SendMessageM& oneOfTypes::sendmessage() const {
  // @@protoc_insertion_point(field_get:chatserver.oneOfTypes.sendmessage)
  return has_sendmessage()
      ? *types_.sendmessage_
      : ::chatserver::SendMessageM::default_instance();
}
::chatserver::SendMessageM* oneOfTypes::mutable_sendmessage() {
  if (!has_sendmessage()) {
    clear_types();
    set_has_sendmessage();
    types_.sendmessage_ = new ::chatserver::SendMessageM;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.oneOfTypes.sendmessage)
  return types_.sendmessage_;
}
::chatserver::SendMessageM* oneOfTypes::release_sendmessage() {
  // @@protoc_insertion_point(field_release:chatserver.oneOfTypes.sendmessage)
  if (has_sendmessage()) {
    clear_has_types();
    ::chatserver::SendMessageM* temp = types_.sendmessage_;
    types_.sendmessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void oneOfTypes::set_allocated_sendmessage(::chatserver::SendMessageM* sendmessage) {
  clear_types();
  if (sendmessage) {
    set_has_sendmessage();
    types_.sendmessage_ = sendmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.oneOfTypes.sendmessage)
}

// optional .chatserver.ReceiveMessageM receivemessage = 4;
bool oneOfTypes::has_receivemessage() const {
  return types_case() == kReceivemessage;
}
void oneOfTypes::set_has_receivemessage() {
  _oneof_case_[0] = kReceivemessage;
}
void oneOfTypes::clear_receivemessage() {
  if (has_receivemessage()) {
    delete types_.receivemessage_;
    clear_has_types();
  }
}
 const ::chatserver::ReceiveMessageM& oneOfTypes::receivemessage() const {
  // @@protoc_insertion_point(field_get:chatserver.oneOfTypes.receivemessage)
  return has_receivemessage()
      ? *types_.receivemessage_
      : ::chatserver::ReceiveMessageM::default_instance();
}
::chatserver::ReceiveMessageM* oneOfTypes::mutable_receivemessage() {
  if (!has_receivemessage()) {
    clear_types();
    set_has_receivemessage();
    types_.receivemessage_ = new ::chatserver::ReceiveMessageM;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.oneOfTypes.receivemessage)
  return types_.receivemessage_;
}
::chatserver::ReceiveMessageM* oneOfTypes::release_receivemessage() {
  // @@protoc_insertion_point(field_release:chatserver.oneOfTypes.receivemessage)
  if (has_receivemessage()) {
    clear_has_types();
    ::chatserver::ReceiveMessageM* temp = types_.receivemessage_;
    types_.receivemessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void oneOfTypes::set_allocated_receivemessage(::chatserver::ReceiveMessageM* receivemessage) {
  clear_types();
  if (receivemessage) {
    set_has_receivemessage();
    types_.receivemessage_ = receivemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.oneOfTypes.receivemessage)
}

// optional .chatserver.ListM list = 5;
bool oneOfTypes::has_list() const {
  return types_case() == kList;
}
void oneOfTypes::set_has_list() {
  _oneof_case_[0] = kList;
}
void oneOfTypes::clear_list() {
  if (has_list()) {
    delete types_.list_;
    clear_has_types();
  }
}
 const ::chatserver::ListM& oneOfTypes::list() const {
  // @@protoc_insertion_point(field_get:chatserver.oneOfTypes.list)
  return has_list()
      ? *types_.list_
      : ::chatserver::ListM::default_instance();
}
::chatserver::ListM* oneOfTypes::mutable_list() {
  if (!has_list()) {
    clear_types();
    set_has_list();
    types_.list_ = new ::chatserver::ListM;
  }
  // @@protoc_insertion_point(field_mutable:chatserver.oneOfTypes.list)
  return types_.list_;
}
::chatserver::ListM* oneOfTypes::release_list() {
  // @@protoc_insertion_point(field_release:chatserver.oneOfTypes.list)
  if (has_list()) {
    clear_has_types();
    ::chatserver::ListM* temp = types_.list_;
    types_.list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void oneOfTypes::set_allocated_list(::chatserver::ListM* list) {
  clear_types();
  if (list) {
    set_has_list();
    types_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:chatserver.oneOfTypes.list)
}

bool oneOfTypes::has_types() const {
  return types_case() != TYPES_NOT_SET;
}
void oneOfTypes::clear_has_types() {
  _oneof_case_[0] = TYPES_NOT_SET;
}
oneOfTypes::TypesCase oneOfTypes::types_case() const {
  return oneOfTypes::TypesCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chatserver

// @@protoc_insertion_point(global_scope)
